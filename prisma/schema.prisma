// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Cashier     Cashier[]
  Employee    Employee[]
  BillCount   BillCount[]
  Attachment  Attachment[]
  Order       Order[]
  ExpenseList ExpenseList[]
  Product     Product[]
}

model Cashier {
  id          String               @id @default(cuid())
  name        String               @unique
  accessKey   String
  secureCode  String               @default(cuid())
  permissions CashierPermissions[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Product     Product[] // Add this relation
  Delivery    Delivery[]
  Sale        Sale[]
  Shift       Shift[]
  Transfer    Transfer[]
  Kahon       Kahon[]
  Inventory   Inventory[]
  BillCount   BillCount[]
  ExpenseList ExpenseList[]
}

enum CashierPermissions {
  SALES
  DELIVERIES
  STOCKS
  EDIT_PRICE
  KAHON
  BILLS
  ATTACHMENTS
  SALES_HISTORY
}

model Shift {
  id        String          @id @default(cuid())
  startTime DateTime        @default(now())
  endTime   DateTime?
  employee  ShiftEmployee[]
  cashier   Cashier         @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ShiftEmployee {
  id         String   @id @default(cuid())
  shift      Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId    String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Employee {
  id            String          @id @default(cuid())
  name          String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ShiftEmployee ShiftEmployee[]
}

model Product {
  id           String         @id @default(cuid())
  name         String
  picture      String         @default("https://placehold.co/800x800?text=Product")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cashierId    String? // Made optional for migration
  cashier      Cashier?       @relation(fields: [cashierId], references: [id], onDelete: Cascade) // Made optional
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  SackPrice    SackPrice[]
  perKiloPrice PerKiloPrice?
  DeliveryItem DeliveryItem[]
  SaleItem     SaleItem[]
  OrderItem    OrderItem[]
}

model SackPrice {
  id             String         @id @default(cuid())
  price          Float
  stock          Int
  type           SackType
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  profit         Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  specialPrice   SpecialPrice?
  specialPriceId String?
  OrderItem      OrderItem[]
  DeliveryItem   DeliveryItem[]
  SaleItem       SaleItem[]
}

enum SackType {
  FIFTY_KG
  TWENTY_FIVE_KG
  FIVE_KG
}

model SpecialPrice {
  id          String    @id @default(cuid())
  price       Float
  minimumQty  Int
  profit      Float?
  sackPrice   SackPrice @relation(fields: [sackPriceId], references: [id], onDelete: Cascade)
  sackPriceId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PerKiloPrice {
  id           String         @id @default(cuid())
  price        Float
  stock        Float
  profit       Float?
  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderItem    OrderItem[]
  DeliveryItem DeliveryItem[]
  SaleItem     SaleItem[]
}

model Sale {
  id            String        @id @default(cuid())
  cashier       Cashier       @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId     String
  totalAmount   Float
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  SaleItem      SaleItem[]
  Order         Order?
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
}

model SaleItem {
  id              String        @id @default(cuid())
  quantity        Float
  discountedPrice Float?
  isDiscounted    Boolean       @default(false)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  SackPrice       SackPrice?    @relation(fields: [sackPriceId], references: [id], onDelete: Cascade)
  sackPriceId     String?
  sackType        SackType?
  perKiloPrice    PerKiloPrice? @relation(fields: [perKiloPriceId], references: [id], onDelete: Cascade)
  perKiloPriceId  String?
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId          String
  isGantang       Boolean       @default(false)
  isSpecialPrice  Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Delivery {
  id                String         @id @default(cuid())
  driverName        String
  deliveryTimeStart DateTime
  cashier           Cashier        @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId         String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  DeliveryItem      DeliveryItem[]
}

model DeliveryItem {
  id             String        @id @default(cuid())
  quantity       Float
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  SackPrice      SackPrice?    @relation(fields: [sackPriceId], references: [id], onDelete: Cascade)
  sackPriceId    String?
  sackType       SackType?
  perKiloPrice   PerKiloPrice? @relation(fields: [perKiloPriceId], references: [id], onDelete: Cascade)
  perKiloPriceId String?
  delivery       Delivery      @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  deliveryId     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Transfer {
  id        String       @id @default(cuid())
  quantity  Float
  name      String
  type      TransferType
  cashier   Cashier      @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum TransferType {
  OWN_CONSUMPTION
  RETURN_TO_WAREHOUSE
  KAHON
  REPACK
}

model Kahon {
  id         String      @id @default(cuid())
  name       String
  cashier    Cashier     @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  KahonItems KahonItem[]
  Sheets     Sheet[]
}

model Inventory {
  id             String           @id @default(cuid())
  name           String
  cashier        Cashier          @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  InventorySheet InventorySheet[]
}

model KahonItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Float
  kahon     Kahon    @relation(fields: [kahonId], references: [id], onDelete: Cascade)
  kahonId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cells     Cell[]
}

model InventorySheet {
  id          String         @id @default(cuid())
  name        String
  inventory   Inventory      @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String
  columns     Int            @default(10) // Number of columns in this sheet
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Rows        InventoryRow[]
}

model InventoryRow {
  id               String          @id @default(cuid())
  rowIndex         Int             @default(autoincrement())
  inventorySheet   InventorySheet  @relation(fields: [inventorySheetId], references: [id], onDelete: Cascade)
  inventorySheetId String
  isItemRow        Boolean         @default(true) // Regular row or total/calculation row
  itemId           String? // Can be null for total/calculation rows
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Cells            InventoryCell[]
}

model InventoryCell {
  id             String       @id @default(cuid())
  columnIndex    Int          @default(autoincrement()) // Column position
  inventoryRow   InventoryRow @relation(fields: [inventoryRowId], references: [id], onDelete: Cascade)
  inventoryRowId String
  color          String?
  value          String? // The displayed/calculated value
  formula        String? // Formula for calculated cells (e.g., "=C2*D2")
  isCalculated   Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Sheet {
  id        String   @id @default(cuid())
  name      String
  kahon     Kahon    @relation(fields: [kahonId], references: [id], onDelete: Cascade)
  kahonId   String
  columns   Int      @default(10) // Number of columns in this sheet
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rows      Row[]
}

model Row {
  id        String   @id @default(cuid())
  rowIndex  Int // Position in the sheet
  sheet     Sheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId   String
  isItemRow Boolean  @default(true) // Regular row or total/calculation row
  itemId    String? // Can be null for total/calculation rows
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cells     Cell[]
}

model Cell {
  id           String     @id @default(cuid())
  columnIndex  Int // Column position
  row          Row        @relation(fields: [rowId], references: [id], onDelete: Cascade)
  rowId        String
  color        String?
  kahonItem    KahonItem? @relation(fields: [kahonItemId], references: [id], onDelete: SetNull)
  kahonItemId  String? // Can be null for calculation cells
  value        String? // The displayed/calculated value
  formula      String? // Formula for calculated cells (e.g., "=C2*D2")
  isCalculated Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Attachment {
  id        String         @id @default(cuid())
  name      String
  url       String
  userId    String
  type      AttachmentType
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum AttachmentType {
  EXPENSE_RECEIPT
  CHECKS_AND_BANK_TRANSFER
  INVENTORIES
  SUPPORTING_DOCUMENTS
}

model BillCount {
  id                   String   @id @default(cuid())
  Bills                Bills[]
  userId               String? // Optional for user oversight
  cashierId            String? // Optional for cashier operations
  beginningBalance     Float
  showBeginningBalance Boolean  @default(false)
  user                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  cashier              Cashier? @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Bills {
  id          String    @id @default(cuid())
  amount      Int
  type        BillType
  billCountId String
  billCount   BillCount @relation(fields: [billCountId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum BillType {
  THOUSAND
  FIVE_HUNDRED
  HUNDRED
  FIFTY
  TWENTY
  COINS
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  address   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id         String      @id @default(cuid())
  totalPrice Float
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  status     OrderStatus @default(PENDING)
  saleId     String?     @unique
  sale       Sale?       @relation(fields: [saleId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItem  OrderItem[]
}

model OrderItem {
  id             String        @id @default(cuid())
  quantity       Float
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  SackPrice      SackPrice?    @relation(fields: [sackPriceId], references: [id], onDelete: Cascade)
  sackPriceId    String?
  sackType       SackType?
  perKiloPrice   PerKiloPrice? @relation(fields: [perKiloPriceId], references: [id], onDelete: Cascade)
  perKiloPriceId String?
  isSpecialPrice Boolean       @default(false)
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model ExpenseList {
  id           String         @id @default(cuid())
  userId       String? // Optional for user oversight
  cashierId    String? // Optional for cashier operations
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cashier      Cashier?       @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ExpenseItems ExpenseItems[]
}

model ExpenseItems {
  id            String      @id @default(cuid())
  name          String
  amount        Float
  expenseList   ExpenseList @relation(fields: [expenseListId], references: [id], onDelete: Cascade)
  expenseListId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
