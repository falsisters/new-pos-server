// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Cashier   Cashier[]
  Employee  Employee[]
  Product   Product[]
}

model Cashier {
  id          String               @id @default(cuid())
  name        String               @unique
  accessKey   String
  secureCode  String               @default(cuid())
  permissions CashierPermissions[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Delivery    Delivery[]
  Sale        Sale[]
  Shift       Shift[]
  Kahon       Kahon?
  Inventory   Inventory?
  Transfer    Transfer[]
}

enum CashierPermissions {
  SALES
  DELIVERIES
  STOCKS
  EDIT_PRICE
  KAHON
  PROFITS
  ATTACHMENTS
  SALES_HISTORY
}

model Shift {
  id        String          @id @default(cuid())
  startTime DateTime        @default(now())
  endTime   DateTime?
  employee  ShiftEmployee[]
  cashier   Cashier         @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ShiftEmployee {
  id         String   @id @default(cuid())
  shift      Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId    String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Employee {
  id            String          @id @default(cuid())
  name          String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ShiftEmployee ShiftEmployee[]
}

model Product {
  id           String         @id @default(cuid())
  name         String
  picture      String         @default("https://placehold.co/800x800?text=Product")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  SackPrice    SackPrice[]
  perKiloPrice PerKiloPrice?
  DeliveryItem DeliveryItem[]
  SaleItem     SaleItem[]
}

model SackPrice {
  id           String        @id @default(cuid())
  price        Float
  stock        Int
  type         SackType
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  specialPrice SpecialPrice?
}

enum SackType {
  FIFTY_KG
  TWENTY_FIVE_KG
  FIVE_KG
}

model SpecialPrice {
  id          String    @id @default(cuid())
  price       Float
  minimumQty  Int
  sackPrice   SackPrice @relation(fields: [sackPriceId], references: [id], onDelete: Cascade)
  sackPriceId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PerKiloPrice {
  id        String   @id @default(cuid())
  price     Float
  stock     Float
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id            String        @id @default(cuid())
  cashier       Cashier       @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId     String
  totalAmount   Float
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  SaleItem      SaleItem[]
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
}

model SaleItem {
  id             String   @id @default(cuid())
  quantity       Float
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  sale           Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId         String
  isGantang      Boolean  @default(false)
  isSpecialPrice Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Delivery {
  id                String         @id @default(cuid())
  driverName        String
  deliveryTimeStart DateTime
  cashier           Cashier        @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId         String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  DeliveryItem      DeliveryItem[]
}

model DeliveryItem {
  id         String   @id @default(cuid())
  quantity   Float
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  deliveryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transfer {
  id        String       @id @default(cuid())
  quantity  Float
  name      String
  type      TransferType
  cashier   Cashier      @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum TransferType {
  OWN_CONSUMPTION
  RETURN_TO_WAREHOUSE
  KAHON
  REPACK
}

model Kahon {
  id         String      @id @default(cuid())
  name       String
  cashier    Cashier     @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId  String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  KahonItems KahonItem[]
}

model Inventory {
  id             String          @id @default(cuid())
  name           String
  cashier        Cashier         @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  cashierId      String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  InventoryItems InventoryItem[]
}

model KahonItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Float
  kahon     Kahon    @relation(fields: [kahonId], references: [id], onDelete: Cascade)
  kahonId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Float
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
